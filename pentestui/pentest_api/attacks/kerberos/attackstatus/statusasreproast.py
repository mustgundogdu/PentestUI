"""
Assrep-ROAST Attack Error Or Status Logging

"""

class AsrepRoastStatus:

    def TgTError(self, error):

        if error is not None:
            self.errorResult=error

    def SearchFilter(self, logsearch):
        if logsearch is not None:
            self.errorResult = logsearch

    def SearchFilterError(self, error):
        if error is not None:
            self.errorResult=error

    def PreAuthError(self, error):
        if error is not None:
            self.errorResult = error

    def MachineNameError(self, error):
        if error is not None:
            self.errorResult = error

    def getTGTError(self, error):
        if error is not None:
            self.errorResult= error

    def KerberosError(self, error):
        if error is not None:
            self.errorResult = error

    def UserError(self, error):
        if error is not None:
            self.errorResult= error

    def ResultAsrep(self, result):
        AsrepResult.append(result)


class SMBErrorsAs:


    def smblibraryerror(self):
        self.errorResult = 'SMB LIBRARY ERROR'

    def smbntlmerror(self):
        self.errorResult='Cannot authenticate against target, enable ntlm_fallback'

    def invaliderror(self):
        self.errorResult='Invalid Value'

    def serverNameerror(self):
        self.errorResult='Hostname was not supplied by target host and absent validation is disallowed'

    def serverhosterror(self):
        self.errorResult='Supplied hostname does not match reported hostnames '

    def smbstructerror(self):
        self.errorResult='SMB SESSION ERROR'

class NTLMErrors:

    def validerror(self):
        self.errorResult='Cant create a valid KXKEY'

    def ntlmchallenge(self):
        self.errorResult ='Must provide the os_version field if the NTLMSSP_NEGOTIATE_VERSION flag is set'


class GSSAPIError:


    def Unknownerror(self):
        self.errorResult='Unknow Error'

    def oiderror(self):
        self.errorResult='OID Tag Not Found'

class StructAsrror:

    def errortag(self):
        self.errorResult='Array field has a constant size, and it doesnt match the actual value'

class CryptoError:

    def cryptoWrong(self):
        self.errorResult='Wrong seed Length'
